name:           layers
version:        0.2
synopsis:       Modular type class machinery for monad transformer stacks.
license:        BSD3
license-file:   LICENSE
author:         Shane O'Brien
maintainer:     shane@duairc.com
stability:      Experimental
category:       Control
cabal-version:  >= 1.4
homepage:       http://github.com/duairc/layers
bug-reports:    http://github.com/duairc/layers/issues
build-type:     Simple
description:
  The @layers@ package provides the type class machinery needed to make monads
  built out of stacks of monad transformers easy to use. The type class
  machinery provided by and the design patterns suggested by @layers@ allow
  for much more modularity than is possible with the existing type class
  machinery and design patterns. With @layers@ it is possible to use arbitrary
  monad interfaces (monad interfaces are what we call the sort of type classes
  that you see in the @mtl@ and similar packages) with arbtirary monad
  transformers (by monad transformers here, we are specifically to monad
  constructors, such as the ones defined in @transformers@), without ever
  having to explicitly define how to lift specific interfaces through specific
  transformers. It also provides a more complete set of monad interfaces than
  the @mtl@, which fully solve the problems of exceptions and exception safety
  (among others), while maintaining full compatibility with all the monad
  interfaces from the @mtl@.
  .
  @layers@ improves upon and/or replaces, in part or in whole, the following
  list of packages: @mtl@, @mmtl@, @transformers-base@, @monad-control@,
  @lifted-base@, @monad-peel@, @MonadCatchIO-transformers@, @exceptions@,
  @MonadCatchIO-mtl@, @exception-transformers@, @monad-abort-fd@ and probably
  more too. There have been many attempts to either improve upon or work
  around the deficiencies of the existing type class machinery for monad
  transformer stacks, but we believe @layers@ is the most complete of any of
  these so far.
  .
  A comprehensive overview of the motivation behind @layers@ and an
  explanation of the design decisions taken is given in
  "Documentation.Layers.Overview". It is /highly recommended/ that you read
  this if you are considering using this package. The core type classes used
  by the package are exported from "Control.Monad.Lift" (some of these
  originate in @transformers@ and @mmorph@). The rest of the modules in this
  package export monad interfaces, in the "Monad.*" hierarchy, including
  replacements for all of the monad interfaces of the @mtl@ package.

extra-source-files:
  CHANGELOG
  CONTRIBUTORS
  README

Library
  hs-source-dirs:
    src

  exposed-modules:
    Documentation.Layers.Overview
    Control.Monad.Lift
    Monad.Abort
    Monad.Cont
    Monad.Catch
    Monad.Error
    Monad.Fork
    Monad.Mask
    Monad.Reader
    Monad.Recover
    Monad.RWS
    Monad.State
    Monad.ST
    Monad.Throw
    Monad.Try
    Monad.Writer

  build-depends:
    base >= 4 && < 4.8,
    mmorph >= 1.0 && < 1.1,
    transformers >= 0.2 && < 0.4

  if impl(ghc >= 7.4)
    cpp-options: -DLANGUAGE_ConstraintKinds

  if impl(ghc >= 7.7)
    exposed-modules:
      Control.Monad.Lift.Unsafe

  ghc-options:
    -Wall
